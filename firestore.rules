rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Users can only access their own tasks
    match /tasks/{taskId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        isValidTask();
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        isValidTask();
    }

    // Users can only access their own notes
    match /notes/{noteId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        isValidNote();
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        isValidNote();
    }

    // Helper functions
    function isValidTask() {
      return request.resource.data.keys().hasAll(['title', 'description', 'priority', 'userId']) &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.description is string &&
             request.resource.data.priority in ['Low', 'Medium', 'High'] &&
             request.resource.data.userId is string;
    }

    function isValidNote() {
      return request.resource.data.keys().hasAll(['title', 'content', 'userId']) &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.content is string &&
             request.resource.data.content.size() > 0 &&
             request.resource.data.userId is string;
    }
  }
}